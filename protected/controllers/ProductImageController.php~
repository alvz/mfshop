<?php

class ProductImageController extends Controller {

    private $_product;

    /**
     * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
     * using two-column layout. See 'protected/views/layouts/column2.php'.
     */
    public $layout = '//layouts/column3';

    /**
     * @return array action filters
     */
    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
            'ProductContext + admin index create'
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules() {
                $adminUsers=AuthAssignment::model()->findAll('itemname=:admin',array(':admin'=>'admin'));
        $usernames=array();
        foreach ($adminUsers as $item) {
            $usernames[]=$item->user->username;
        }
        return array(
            array('allow', // allow admin user to perform 'admin' and 'delete' actions
                'actions' => array('admin', 'delete', 'ProductUploadImage', 'productUploadImageViewer',
                    'create', 'update', 'index', 'view'),
                'users' => $usernames,
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Displays a particular model.
     * @param integer $id the ID of the model to be displayed
     */
    public function actionView($id) {
        $this->render('view', array(
            'model' => $this->loadModel($id),
        ));
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate($pid) {
        ProductImage::clearUploadedFile();
        if (Product::model()->findByPk($pid)) {
            $model = new ProductImage;

            // Uncomment the following line if AJAX validation is needed
            // $this->performAjaxValidation($model);

            if (isset($_POST['ProductImage'])) {
                $model->attributes = $_POST['ProductImage'];
                $model->product_id = $pid;
                //$model->product_image_url=
                if ($model->save())
                    $this->redirect(array('product/admin', 'id' => $pid));
            }

            $this->render('create', array(
                'model' => $model,
                'pid' => $pid,
            ));
        }
        else
            throw new CHttpException(404, 'The requested page does not exist.');
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        $model = $this->loadModel($id);

        // Uncomment the following line if AJAX validation is needed
        // $this->performAjaxValidation($model);

        if (isset($_POST['ProductImage'])) {
            $model->attributes = $_POST['ProductImage'];
            if ($model->save())
                $this->redirect(array('view', 'id' => $model->id));
        }

        $this->render('update', array(
            'model' => $model,
        ));
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        // if (Yii::app()->request->isPostRequest) {
        // we only allow deletion via POST request
        $productModel = $this->loadModel($id);
        $pid = $productModel->product_id;

        
        $productModel->delete();


        // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
        if (!isset($_GET['ajax']))
            $this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin', 'pid' => $pid));
        // }
        // else
        //  throw new CHttpException(400, 'Invalid request. Please do not repeat this request again.');
    }

    /**
     * Lists all models.
     */
    public function actionIndex() {
        $dataProvider = new CActiveDataProvider('ProductImage', array(
                    'criteria' => array(
                        'condition' => 'product_id=:productID',
                        'params' => array(
                            'productID' => $this->_product->id,
                        )
                    ),
                ));
        $this->render('index', array(
            'dataProvider' => $dataProvider,
        ));
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        $model = new ProductImage('search');
        $model->unsetAttributes();  // clear any default values
        if (isset($_GET['ProductImage']))
            $model->attributes = $_GET['ProductImage'];

        $model->product_id = $this->_product->id;

        $this->render('admin', array(
            'model' => $model,
        ));
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer the ID of the model to be loaded
     */
    public function loadModel($id) {
        $model = ProductImage::model()->findByPk((int) $id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param CModel the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'product-image-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    //-------------------------------------------------------------------------------------------------------

    public function actionProductUploadImage($pid) {
        if (Product::model()->findByPk($pid)) {
            ProductImage::clearUploadedFile();

            $allowedExtensions = array("jpeg", "jpg", "gif", "png");
            $sizeLimit = 2 * 1024 * 1024; // max size = 2 MB
            $uploadDirectory = CAssetManager::DEFAULT_BASEPATH . DIRECTORY_SEPARATOR
                    . 'images' . DIRECTORY_SEPARATOR . 'products' . DIRECTORY_SEPARATOR;

            @mkdir($uploadDirectory);

            $uploader = new qqFileUploader($allowedExtensions, $sizeLimit);
            $result = $uploader->handleUpload($uploadDirectory);

            if (isset($result['success']))
                if ($result['success'] == true) {
                    $imageinfo = getimagesize($result['fullpath']);
                    $mimetype = $imageinfo['mime'];

                    $model = new ProductImage;
                    $model->product_id = $pid;
                    $model->product_image_url = DIRECTORY_SEPARATOR.'mfshop'.DIRECTORY_SEPARATOR.$result['fullpath'];//Yii::app()->assetManager->publish($uploadDirectory . $result['filename'] . '.' . $result['ext']);
                    if ($model->save(false)) {
                        ProductImage::saveUploadedFile($result['fullpath'], $result['filename'], $mimetype);
                    }
                } else {
                    // manage your error here
                }

            echo htmlspecialchars(CJSON::encode($result), ENT_NOQUOTES);
        }
        else
            throw new CHttpException(404, 'The requested page does not exist.');
    }

    public function actionProductUploadImageViewer() {
        ProductImage::echoUploadedsImage();
    }

    //--------------------------------------------------------------------------------------


    protected function loadProduct($product_id) {
        if ($this->_product === NULL) {
            $this->_product = Product::model()->findByPk($product_id);
            if ($this->_product === NULL) {
                throw new CHttpException(404, 'the requested product does not exist.');
            }
        }
        return $this->_product;
    }

    public function filterProductContext($filterChain) {
        $productID = NULL;

        if (isset($_GET['pid'])) {
            $productID = $_GET['pid'];
        } else {
            if (isset($_POST['pid'])) {
                $productID = $_GET['pid'];
            }
        }

        $this->loadProduct($productID);
        $filterChain->run();
    }

    public function getProduct() {
        return $this->_product;
    }        

}